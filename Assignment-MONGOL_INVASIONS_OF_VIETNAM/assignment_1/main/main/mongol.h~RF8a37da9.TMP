//
// Created by Nhan Nguyen on 01/03/2021.
//
#ifndef MONGOL_H
#define MONGOL_H

// The library here is concretely set, students are not allowed to include any other libraries.

string readyForBattle(const string ID[], const int NID, const string input1[], const int N1);
int decode(const string A, const string B);
string findRoute(const string ID[], const int NID, const string input3[]);
string decodeVfunction(const string A, const string B);
string findBetrayals(const string input5[], const int N5);
int attack(const string input6[]);
int calculateNoOfWaitingDays(const string input7Str, const string input7Matrix, const int N7);

////////////////////////////////////////////////////////////////////////////
/// STUDENT'S ANSWER HERE
////////////////////////////////////////////////////////////////////////////

string ex1 = "EFGHIJK", ex2 = "LMNOPQR", ex3 = "#TUVWXY", ex4 = "@ASZBCD", ex5 = "UDLR";

bool IsSign(char c)
{
    switch (c)
    {
        case '#':
        case '@':
            return true;
        default:
            return false;
    }
}
int IDKing(const string ID[], const int NID)
{
    int j = 0, m = 0;
    while (j != NID)
    {
        int i = 0;
        while (i != ID[j].length())
        {
            if (ID[j][0] == 'V' && ID[j][1] == 'U' && ID[j][2] == 'A')
            {
                m = 1; return m;
            }
            if (ID[j][i] == 'T' && ID[j][i + 1] == 'H' && ID[j][i + 2] == 'D')
            {
                if ( i > 0 && i < ID[j].length() - 3) m = 2;
                return m;
            }
            i++;
        }
        j++;
    }
    return m;
}
string BiToDec(const string input1[], const int N1)
{
    int i, j = 0; string temp = "";
    while (j != N1)
    {
        i = 0;
        while (i != input1[j].length())
        {
            if (input1[j][i] == ' ')
            {
                temp += ' ';
                cout << "hi" << endl;
                i++;
            }
            else if (input1[j][i] == '0' && input1[j][i + 1] == '0')
            {
                temp += '0';
                i += 2;
            }
            else if (input1[j][i] == '0' && input1[j][i + 1] == '1')
            {
                temp += '1';
                i += 2;
            }
            else if (input1[j][i] == '1' && input1[j][i + 1] == '0')
            {
                temp += '2';
                i += 2;
            }
            else if (input1[j][i] == '1' && input1[j][i + 1] == '1')
            {
                temp += '3';
                i += 2;
            }
        }
        j++;
    }
    cout << temp.length() << endl;
    cout << temp << endl;
    return temp;
} 
string decode20(const string input1[], const int N1)
{
    string mo = BiToDec(input1, N1), ying = "", temp1 = ""; int i = 0, j = 0;
    while (i != mo.length())
    {
        if (mo[i] != ' ') temp1 += mo[i];
        else
        {
            (temp1.length() <= 7) ? (j = temp1.length() - 1) : (j = (temp1.length() % 7) - 1);
            if (temp1[0] == '0') ying += ex1[j];
            else if (temp1[0] == '1') ying += ex2[j];
            else if (temp1[0] == '2') ying += ex3[j];
            else if (temp1[0] == '3') ying += ex4[j];
            temp1.erase();
        }
        if (mo[i] == '\n') ying += ' ';
        i++;
    } 
    i = 0; j = 0; mo.erase();
    /*while (i != ying.length())
    {
        if (ying[i] == '#')
        {
            j = i; temp1.erase();
            while (ying[j] != '\n')
            {
                temp1 += ying[j];
                if (ying[j + 1] == '@' || ying[j + 1] == '#') break; 
                j++;
            }
            (temp1[temp1.length() - 1] == 'Z') ? temp1 += 'A' : temp1 += ( (int)temp1[temp1.length() - 1] + 1 );
            mo += temp1;
        }
        if (ying[i] == '@')
        {
            j = i; temp1.erase(); mo += ying[j]; j++;
            while (ying[j] != '\n')
            {
                temp1 += ying[j];
                if (ying[j + 1] == '@' || ying[j + 1] == '#') break;
                j++;
            }
            reverse(temp1.begin(), temp1.end());
            mo += temp1;
        }
        if (ying[i] == '\n') mo += '\n';
        i++;
    }
    mo.erase(remove_if(mo.begin(), mo.end(), &IsSign), mo.end());*/
    cout << ying << endl;
    cout << ying.length() << endl;
    return mo;
}
string result(const string input1[], const int N1, const string ID[], const int NID)
{
    string k = decode20(input1, N1), temp2 = "", temp3 = "", temp4 = "", fi = k; 
    char tempo; int i = 0, z = 0, y = 0, x = 0, j = 0, m = 0;
    if (IDKing(ID, NID) == 1)
    {
        fi.erase();
        while (i != k.length())
        {
            temp2 += k[i];
            if (k[i + 1] == '\n')
            {
                if (temp2.length() == 2) reverse(temp2.begin(), temp2.end());
                else if (temp2.length() % 2 != 0) reverse(temp2.begin(), temp2.end());
                else
                {
                    y = 0; z = 0; x = 0;
                    while (y != temp2.length())
                    {
                        if (y % 2 == 0) temp3 += temp2[y];
                        else temp3 += ' ';
                        y++;
                    }
                    reverse(temp3.begin(), temp3.end()); temp3.erase(0, 1); temp3 += ' ';
                    while (z != temp2.length())
                    {
                        if (z % 2 != 0) temp4 += temp2[z];
                        else temp4 += ' ';
                        z++;
                    }
                    temp4 += ' '; reverse(temp4.begin(), temp4.end()); temp4.erase(temp4.length() - 1, 1);
                    while (x != temp2.length())
                    {
                        temp4[x] = temp3[x];
                        x += 2;
                    }
                    temp2 = temp4; temp3.erase(); temp4.erase();
                }
                fi += temp2; temp2.erase();
                if (i != k.length() - 2)
                {
                    fi += ' ';
                    i++;
                }
                else break;
            }
            i++;
        }
        z = 0;
        while (z != k.length())
        {
            if (k[z] > fi[z]) fi[z] = k[z];
            z++;
        }
    }
    else if (IDKing(ID, NID) == 2)
    {
        z = 0; i = 0; k.erase();
        while (j != fi.length())
        {
            temp2 += fi[j];
            if (fi[j + 1] == '\n')
            {
                z = 0; m = 0; i = temp2.length();
                while (z != i)
                {
                    if (z % 3 == 0 || z == 0)
                    {
                        temp2.erase(z - m, 1);
                        m++;
                    }
                    z++;
                }
                y = 0; z = 1;
                while (y != temp2.length() - 1)
                {
                    while (z != temp2.length())
                    {
                        if (temp2[y] >= temp2[z])
                        {
                            tempo = temp2[y];
                            temp2[y] = temp2[z];
                            temp2[z] = tempo;
                        }
                        z++;
                    }
                    y++;
                }
                k += temp2; temp2.erase();
                if (j != fi.length() - 2)
                {
                    k += ' ';
                    j++;
                }
                else break;
            }
            j++;
        }
        fi = k;
    }
    else
    {
        i = 0;
        while (i != fi.length())
        {
            if (fi[i] == '\n') fi[i] = ' ';
            i++;
        }
    }
    return fi;
}
string readyForBattle(const string ID[], const int NID, const string input1[], const int N1)
{
    return result(input1, N1, ID, NID);
}
int decode(const string A, const string B)
{
    int a = 0; string temp = A;
    while (true)
    {
        if (temp.find(B) > 100) break;
        temp.erase(temp.find(B), 1);
        a++;
    }
    return a;
    return -1;
}   
string findRoute(const string input3)
{
    int x = 0, y = 0, i = 0, j = 0, k = 0, l = 0; string ab = "", mi = "", N = "", B = "", S = "";
    while (i != input3.length())
    {
        ab += input3[i];
        if (input3[i + 1] == ' ' && j == 0)
        {
            N += ab; ab.erase(); i++; j++;
        }
        else if (input3[i + 1] == ' ' && j == 1)
        {
            B += ab; ab.erase(); i++; j++;
        }
        else if (j == 2)
        {
            S += ab; ab.erase();
        }
        i++;
    }
    k = atoi(B.c_str()); l = atoi(N.c_str()); i = 0;
    if (k < 0 && k > -10)
    {
        while (i != abs(k))
        {
            S += S[0];
            S.erase(0, 1);
            i++;
        }
    }
    else if (k > 0 && k < 10)
    {
        while (i != k)
        {
            S.insert(0, 1, S[S.length() - 1]);
            S.erase(S.length() - 1, 1);
            i++;
        }
    }
    k = atoi(N.c_str()); i = 0; l = 0;
    while (i != S.length())
    {
        while (l != abs(k - (2 * i) ))
        {
            if (S[i] == 'U') S[i] = ex5[1];
            else if (S[i] == 'D') S[i] = ex5[2];
            else if (S[i] == 'L') S[i] = ex5[3];
            else if (S[i] == 'R') S[i] = ex5[0];
            l++;
        }
        if (S[i] == 'U') y += 1;
        else if (S[i] == 'D') y -= 1;
        else if (S[i] == 'L') x -= 1;
        else if (S[i] == 'R') x += 1;
        i++; l = 0;
    }
    S.erase(); ab.erase(); ab += to_string(x); mi += to_string(y); 
    S += '(' + ab + ',' + mi + ')';
    return S;
}
string decodeVfunction(const string A, const string B)
{
    string temp1 = A, temp2 = B; int  i = 0, j = 0;

    return "You can remove this return";
}
string findBetrayals(const string input5[], const int N5)
{
    return "You can remove this return";
}
int attack(const string input6[])
{
    return -1;
}
int calculateNoOfWaitingDays(const string input7Str, const string input7Matrix[], const int k)
{
    return -1;
}

#endif /* MONGOL_H */
